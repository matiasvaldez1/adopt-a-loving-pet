---
import Layout from '@layouts/Default.astro';
import PetCard from '@components/PetCard.astro';
import FormFilter from '@components/FormFilter.astro';
import PetList from '@components/PetList.astro';
import PetListHeader from '@components/PetListHeader.astro';
import { db, eq, like, and, asc, desc, PetPosting, PetType, Poster } from 'astro:db';

const pets = await db
	.select()
	.from(PetPosting)
	.innerJoin(PetType, eq(PetPosting.type, PetType.id))
	.innerJoin(Poster, eq(PetPosting.posterId, Poster.id));
const locations = [...new Set(pets.map((pet) => pet.PetPosting.location))];
const types = await db.select().from(PetType);

let returnedPets = pets;

const sortOptions = [
	{ name: 'Mas nuevos primero', value: 'desc' },
	{ name: 'Mas viejos primero', value: 'asc' },
];

if (Astro.request.method === 'POST') {
	try {
		const data = await Astro.request.formData();

		const sort = data.get('sort');
		const location = data.get('location');
		const type = data.get('type');
		const keyword = data.get('keyword');

		return Astro.redirect(`/?location=${location}&type=${type}&keyword=${keyword}&sort=${sort}`);
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}

let prefilled = Astro.url.searchParams;

const keyword = prefilled?.get('keyword');
const type = prefilled?.get('type');
const location = prefilled?.get('location');

const query = db
	.select()
	.from(PetPosting)
	.innerJoin(PetType, eq(PetPosting.type, PetType.id))
	.innerJoin(Poster, eq(PetPosting.posterId, Poster.id));

query.where(
	and(
		like(PetPosting.title, keyword === null ? `%%` : `%${keyword}%`),
		// @ts-ignore
		type !== '' && typeof type === 'string' ? eq(JobType.value, type) : true,
		// @ts-ignore
		location !== '' && typeof location === 'string' ? eq(PetPosting.location, location) : true,
	),
);

const sorting = Astro.url.searchParams.get('sort') ?? 'desc';
if (sorting != null) {
	if (sorting === 'asc') {
		query.orderBy(asc(PetPosting.posted));
	} else if (sorting === 'desc') {
		query.orderBy(desc(PetPosting.posted));
	}
}

returnedPets = await query.execute();
---

<Layout>
	<section class="relative mb-10 mt-32">
		<h1>Tu nueva mascota te est√° esperando</h1>
		<FormFilter {prefilled} {types} {locations} {sorting} {location} {type} />
	</section>
	<PetList>
		{
			returnedPets.length > 0 ? (
				<>
					<PetListHeader numberOfPets={returnedPets.length} selectedSort={sorting} {sortOptions} />
					<ul class="flex flex-col gap-4">
						{returnedPets.map((pet) => (
							<PetCard pet={pet.PetPosting} type={pet.PetType} poster={pet.Poster} />
						))}
					</ul>
				</>
			) : (
				<>
					<p>No hay mascotas con el filtro seleccionado ü§∑‚Äç‚ôÇÔ∏è</p>
				</>
			)
		}
	</PetList>
</Layout>
